{"version":3,"file":"m3.umd.js","sources":["../src/lib/tools/colors.js","../src/lib/styles/colors/backgrounds-color.js","../src/lib/builders/colorsBuilder.js","../src/lib/builders/ThemeBuilder.js","../src/lib/styles/colors/fonts-color.js","../src/lib/styles/colors/borders-color.js"],"sourcesContent":["\nconst hslValues = (hsl) => {\n    hsl=hsl.replace(\"deg\",\"\");\n    let sep = hsl.indexOf(\",\") > -1 ? \",\" : \" \";\n    hsl = hsl.substr(hsl.startsWith(\"hsla\")?5:4).split(\")\")[0].split(sep);\n  console.log(hsl);\n    let h = hsl[0],\n        s = hsl[1].substr(0, hsl[1].length - 1),\n        l = hsl[2].substr(0, hsl[2].length - 1),\n        a = hsl[3] || 1;\n        console.log(h,s,l,a);\n    return { h, s, l, a };\n};\nconst hslString = (h, s, l, a) => a || a === 0 ? `hsla(${h},${s}%,${l}%,${a})` : `hsl(${h},${s}%,${l}%)`;\nconst hslObject = (h, s, l, a) => ({\n    string: hslString(h, s, l, a),\n    values: { h, s, l, a }\n});\n\nconst rgbValues = (rgb) => {\n    let r = 0, g = 0, b = 0;\n    let sep = rgb.indexOf(\",\") > -1 ? \",\" : \" \";\n    rgb = rgb.substr(rgb.startsWith(\"rgba\")?5:4).split(\")\")[0].split(sep);\n    const length = rgb.length;\n    const percent = rgb.includes(\"%\");\n    if (percent) {\n        r = rgb[0].replace(\"%\", \"\") / 100;\n        g = rgb[1].replace(\"%\", \"\") / 100;\n        b = rgb[2].replace(\"%\", \"\") / 100;\n    } else {\n        r = parseInt(rgb[0]);\n        g = parseInt(rgb[1]);\n        b = parseInt(rgb[2]);\n    }\n    let a = length > 3 ? length === 4 ? rgb[3] : rgb[4] : null;\n    if (a && percent) a = a.replace(\"%\", \"\") / 100;\n    return { r, g, b, a }\n};\nconst hexValues = (hex) => {\n    hex = hex.replace(\"#\", \"\");\n    const length = hex.length;\n    const value = length > 4 ? hex.match(/.{1,2}/g) : hex.match(/.{1,2}/g);\n    let r, g, b, a = null;\n    const int = (from, position) => parseInt(from[position], 16);\n    r = int(value, 0);\n    g = int(value, 1);\n    b = int(value, 2);\n    a = length % 4 === 0 ? (int(value, 3) / 255).toFixed(3) : null;\n    return { r, g, b, a }\n};\n\nconst HSLFromRGBValues = (r, g, b,a) => {\n    // Make r, g, and b fractions of 1\n    r /= 255;\n    g /= 255;\n    b /= 255;\n\n    // Find greatest and smallest channel values\n    let cmin = Math.min(r, g, b),\n        cmax = Math.max(r, g, b),\n        delta = cmax - cmin,\n        h = 0,\n        s = 0,\n        l = 0;\n\n    // Calculate hue\n    // No difference\n    if (delta == 0)\n        h = 0;\n    // Red is max\n    else if (cmax == r)\n        h = ((g - b) / delta) % 6;\n    // Green is max\n    else if (cmax == g)\n        h = (b - r) / delta + 2;\n    // Blue is max\n    else\n        h = (r - g) / delta + 4;\n\n    h = Math.round(h * 60);\n\n    // Make negative hues positive behind 360Â°\n    if (h < 0)\n        h += 360;\n      // Calculate lightness\n  l = (cmax + cmin) / 2;\n\n  // Calculate saturation\n  s = delta == 0 ? 0 : delta / (1 - Math.abs(2 * l - 1));\n    \n  // Multiply l and s by 100\n  s = +(s * 100).toFixed(1);\n  l = +(l * 100).toFixed(1);   \n  return { h, s, l, a }; \n}\n\nconst rgbToHsl = (rgb) => {\n    const { r, g, b, a } = rgbValues(rgb);\n    console.log(r,g,b,a);\n    const { h, s, l } = HSLFromRGBValues(r, g, b)\n    console.log(h,s,l);\n    return hslObject(h, s, l, a);\n};\nconst hexToRgb = (hex) => {\n    const { r, g, b, a } = hexValues(hex);\n    return {\n        string: a ? `rgba(${r},${g},${b},${a})` : `rgb(${r},${g},${b})`,\n        values: { r, g, b, a }\n    }\n};\nconst hexToHsl = (hex) => {\n    const { r, g, b, a } = hexValues(hex);\n    console.log(r,g,b,a);\n    const { h, s, l } = HSLFromRGBValues(r, g, b);\n    console.log(h,s,l);\n    return hslObject(h, s, l, a)\n};\n\n\nconst HSLCACHE={};\n\nexport const getAllHsls = (color) => {\n\n    let { h, s, l, a } = color.startsWith(\"rgb\") ? rgbToHsl(color).values : color.startsWith(\"#\") ? hexToHsl(color).values : color.startsWith(\"hsl\") ? hslValues(color) : {};\n    if (!h && h!==0) throw new Error(\"The color value is not recognized!\");\n    const hsls = [];\n  \n    for (let index = 0; index <= 100; index++) {\n        hsls.push({\n            string: hslString(h, s,index,a),\n            values: { h, s, l: index, a },\n        });\n\n    }\n    return hsls\n};\n\n\nexport const getColorWithLight=(color,light)=>{\n    if(!HSLCACHE[color]) HSLCACHE[color]=getAllHsls(color);\n    return HSLCACHE[color][light];\n}","import { css } from \"styled-components\";\n\nconst bgColor=(theme,key)=>theme.colors&& theme.colors[key]?`background-color:${theme.colors[key]};`:'';\n\nexport const Primary=css`${({theme})=> bgColor(theme,'primaryBg')}`;\nexport const primaryContainer=css`${({theme})=> bgColor(theme,'primaryContainerBg')}`;\nexport const Secondary=css`${({theme})=> bgColor(theme,'secondaryBg')}`;\nexport const SecondaryContainer=css`${({theme})=> bgColor(theme,'secondaryContainerBg')}`;\nexport const Tertiary=css`${({theme})=> bgColor(theme,'tertiaryBg')}`;\nexport const TertiaryContainer=css`${({theme})=> bgColor(theme,'tertiaryContainerBg')}`;\nexport const Error=css`${({theme})=> bgColor(theme,'errorBg')}`;\nexport const ErrorContainer=css`${({theme})=> bgColor(theme,'errorContainerBg')}`;\nexport const Surface=css`${({theme})=> bgColor(theme,'surfaceBg')}`;\nexport const SurfaceDim=css`${({theme})=> bgColor(theme,'surfaceDimBg')}`;\nexport const SurfaceBright=css`${({theme})=> bgColor(theme,'surfaceBrightBg')}`;\nexport const SurfaceContainer=css`${({theme})=> bgColor(theme,'surfaceContainerBg')}`;\nexport const SurfaceContainerLowest=css`${({theme})=> bgColor(theme,'surfaceContainerLowestBg')}`;\nexport const SurfaceContainerLow=css`${({theme})=> bgColor(theme,'surfaceContainerLowBg')}`;\nexport const SurfaceContainerHighest=css`${({theme})=> bgColor(theme,'surfaceContainerHighestBg')}`;\nexport const SurfaceContaineHighr=css`${({theme})=> bgColor(theme,'surfaceContainerHighBg')}`;\n","\nimport { getAllHsls } from \"../tools/colors\"\nconst LEVELS = {\n    KEY_COLOR: {\n        base: {\n            light: 40,\n            dark: 80\n        },\n        on: {\n            light: 100,\n            dark: 20\n        },\n        container: {\n\n            base: {\n                light: 90,\n                dark: 30\n            },\n            on: {\n                light: 10,\n                dark: 90\n            }\n        },\n    },\n    SURFACE: {\n        base: {\n            dark: 6,\n            light: 98\n        },\n        dim: {\n            dark: 6,\n            light: 87\n        },\n        bright: {\n            dark: 24,\n            light: 98\n        },\n\n        on: {\n            base: {\n                dark: 90,\n                light: 10\n            },\n            variant: {\n                dark: 80,\n                light: 30\n            }\n        },\n        outline: {\n            base: {\n                dark: 60,\n                light: 50\n            },\n\n            variant: {\n                dark: 30,\n                light: 80\n            }\n        },\n        container: {\n            base: {\n                dark: 12,\n                light: 94\n            },\n            lowest: {\n                dark: 4,\n                light: 100\n            },\n            low: {\n                dark: 10,\n                light: 96\n            },\n            high: {\n                dark: 17,\n                light: 92\n            },\n            highest: {\n                dark: 22,\n                light: 90\n            }\n        }\n    }\n}\nconst keyColor = (color, level) => {\n    const lights = getAllHsls(color);\n    return {\n        base: {\n            dark: lights[LEVELS.KEY_COLOR.base.dark],\n            light: lights[LEVELS.KEY_COLOR.base.light],\n        },\n        on: {\n            dark: lights[LEVELS.KEY_COLOR.on.dark],\n            light: lights[LEVELS.KEY_COLOR.on.light],\n        },\n        container: {\n            base: {\n                dark: lights[LEVELS.KEY_COLOR.container.base.dark],\n                light: lights[LEVELS.KEY_COLOR.container.base.light],\n            },\n            on: {\n                light: lights[LEVELS.KEY_COLOR.container.on.light],\n                dark: lights[LEVELS.KEY_COLOR.container.on.dark],\n            }\n        }\n    }\n}\nconst NeutralColor = (color,variant) => {\n    const lights = getAllHsls(color);\n    const variantLights = getAllHsls(variant||color);\n    return {\n        base: {\n            dark: lights[LEVELS.SURFACE.base.dark],\n            light: lights[LEVELS.SURFACE.base.light],\n        },\n        dim: {\n            dark: lights[LEVELS.SURFACE.dim.dark],\n            light: lights[LEVELS.SURFACE.dim.light],\n        },\n        bright: {\n            dark: lights[LEVELS.SURFACE.bright.dark],\n            light: lights[LEVELS.SURFACE.bright.light],\n        },\n        on: {\n            base: {\n                dark: lights[LEVELS.SURFACE.on.base.dark],\n                light: lights[LEVELS.SURFACE.on.base.light],\n            },\n            variant: {\n                dark: variantLights[LEVELS.SURFACE.on.variant.dark],\n                light: variantLights[LEVELS.SURFACE.on.variant.light],\n            },\n        },\n        outline: {\n            base: {\n                dark: lights[LEVELS.SURFACE.outline.base.dark],\n                light: lights[LEVELS.SURFACE.outline.base.light],\n            },\n            variant: {\n                dark: variantLights[LEVELS.SURFACE.outline.variant.dark],\n                light: variantLights[LEVELS.SURFACE.outline.variant.light],\n            },\n        },\n        container: {\n            base: {\n                dark: lights[LEVELS.SURFACE.container.base.dark],\n                light: lights[LEVELS.SURFACE.container.base.light],\n            },\n            lowest: {\n                dark: lights[LEVELS.SURFACE.container.lowest.dark],\n                light: lights[LEVELS.SURFACE.container.lowest.light],\n            },\n            low: {\n                dark: lights[LEVELS.SURFACE.container.low.dark],\n                light: lights[LEVELS.SURFACE.container.low.light],\n            },\n            high: {\n                dark: lights[LEVELS.SURFACE.container.high.dark],\n                light: lights[LEVELS.SURFACE.container.high.light],\n            },\n            highest: {\n                dark: lights[LEVELS.SURFACE.container.highest.dark],\n                light: lights[LEVELS.SURFACE.container.highest.light],\n            },\n        }\n    }\n}\n\nconst BuildThemeColors = ({theme='light', primary, secondary, tertiary, error, surface,surfaceVariant }) => {\n\n    const PRIMARY=primary&&keyColor(primary);\n    const SECONDARY=secondary&&keyColor(secondary);\n    const TERTIARY=tertiary&&keyColor(tertiary);\n    const ERROR=error&&keyColor(error);\n    const SURFACE=surface&&NeutralColor(surface,surfaceVariant);\n    \n    return {\n        primaryBg:PRIMARY&&PRIMARY.base[theme].string,\n        primaryColor:PRIMARY&&PRIMARY.on[theme].string,\n        primaryContainerBg:PRIMARY&&PRIMARY.container.base[theme].string,\n        primaryContainerColor:PRIMARY&&PRIMARY.container.on[theme].string,\n        secoondaryBg:SECONDARY&&SECONDARY.base[theme].string,\n        secoondaryColor:SECONDARY&&SECONDARY.on[theme].string,\n        secoondaryContainerBg:SECONDARY&&SECONDARY.container.base[theme].string,\n        secoondaryContainerColor:SECONDARY&&SECONDARY.container.on[theme].string,\n        tertiaryBg:TERTIARY&&TERTIARY.base[theme].string,\n        tertiaryColor:TERTIARY&&TERTIARY.on[theme].string,\n        tertiaryContainerBg:TERTIARY&&TERTIARY.container.base[theme].string,\n        tertiaryContainerColor:TERTIARY&&TERTIARY.container.on[theme].string,\n        ErrorBg:ERROR&&ERROR.base[theme].string,\n        ErrorColor:ERROR&&ERROR.on[theme].string,\n        ErrorContainerBg:ERROR&&ERROR.container.base[theme].string,\n        ErrorContainerColor:ERROR&&ERROR.container.on[theme].string,\n\n        surfaceBg:SURFACE&&SURFACE.base[theme].string,\n        surfaceDimBg:SURFACE&&SURFACE.dim[theme].string,\n        surfaceBrighBg:SURFACE&&SURFACE.bright[theme].string,\n\n        surfaceColor:SURFACE&&SURFACE.on.base[theme].string,\n        surfaceColorVariant:SURFACE&&SURFACE.on.variant[theme].string,\n\n        surfaceBorderColor:SURFACE&&SURFACE.outline.base[theme].string,\n        surfaceBorderColorVariant:SURFACE&&SURFACE.outline.variant[theme].string,\n\n        surfaceContainerBg:SURFACE&&SURFACE.container.base[theme].string,\n        surfaceContainerLowestBg:SURFACE&&SURFACE.container.lowest[theme].string,\n        surfaceContainerLowBg:SURFACE&&SURFACE.container.low[theme].string,\n        surfaceContainerHighBg:SURFACE&&SURFACE.container.high[theme].string,\n        surfaceContainerHighestBg:SURFACE&&SURFACE.container.highest[theme].string,\n        \n    }\n}\nexport default BuildThemeColors;\n","import BuildThemeColors from \"./colorsBuilder\"\n\n\nexport  function ThemeBuilder({colors={}}){\nreturn {\n    colors:BuildThemeColors(colors)\n}\n}\n","import { css } from \"styled-components\";\n\n\n\nconst color=(theme,key)=>{\n    console.log(theme,key);\n    return theme.colors&& theme.colors[key]?`color:${theme.colors[key]};`:'';}\n\nexport const Primary=css`${({theme})=> color(theme,'primaryColor')}`;\nexport const PrimaryContainer=css`${({theme})=> color(theme,'primaryContainerColor')}`;\nexport const Secondary=css`${({theme})=> color(theme,'secondaryColor')}`;\nexport const SecondaryContainer=css`${({theme})=> color(theme,'secondaryContainerColor')}`;\nexport const Tertiary=css`${({theme})=> color(theme,'tertiaryColor')}`;\nexport const TertiaryContainer=css`${({theme})=> color(theme,'tertiaryContainerColor')}`;\nexport const Error=css`${({theme})=> color(theme,'errorColor')}`;\nexport const ErrorContainer=css`${({theme})=> color(theme,'errorContainerColor')}`;\nexport const Surface=css`${({theme})=> color(theme,'surfaceColor')}`;\nexport const SurfaceVariant=css`${({theme})=> color(theme,'surfaceColorVariant')}`;","import { css } from \"styled-components\";\n\nconst borderColor=(theme,key)=>theme.colors&& theme.colors[key]?`border-color:${theme.colors[key]};`:'';\n\nexport const Surface=css`${({theme})=> borderColor(theme,'surfaceBorderColor')}`;\nexport const SurfaceVariant=css`${({theme})=> borderColor(theme,'surfaceBorderColorVariant')}`;\n\n\n\n\n"],"names":["_templateObject","_templateObject2","_templateObject3","_templateObject4","_templateObject5","_templateObject6","_templateObject7","_templateObject8","_templateObject9","_templateObject10","_templateObject11","_templateObject12","_templateObject13","_templateObject14","_templateObject15","_templateObject16","hslString","h","s","l","a","hslObject","string","values","HSLFromRGBValues","r","g","b","cmin","Math","min","cmax","max","delta","round","abs","toFixed","getAllHsls","color","_ref","startsWith","rgb","_rgbValues","sep","indexOf","length","substr","split","percent","includes","replace","parseInt","rgbValues","console","log","_HSLFromRGBValues","rgbToHsl","hex","_hexValues2","value","match","int","from","position","hexValues","_HSLFromRGBValues2","hexToHsl","hsl","hslValues","Error","hsls","index","push","keyColor","level","lights","base","dark","light","on","container","BuildThemeColors","_ref$theme","theme","primary","secondary","tertiary","error","surface","surfaceVariant","PRIMARY","SECONDARY","TERTIARY","ERROR","SURFACE","variant","variantLights","dim","bright","outline","lowest","low","high","highest","NeutralColor","primaryBg","primaryColor","primaryContainerBg","primaryContainerColor","secoondaryBg","secoondaryColor","secoondaryContainerBg","secoondaryContainerColor","tertiaryBg","tertiaryColor","tertiaryContainerBg","tertiaryContainerColor","ErrorBg","ErrorColor","ErrorContainerBg","ErrorContainerColor","surfaceBg","surfaceDimBg","surfaceBrighBg","surfaceColor","surfaceColorVariant","surfaceBorderColor","surfaceBorderColorVariant","surfaceContainerBg","surfaceContainerLowestBg","surfaceContainerLowBg","surfaceContainerHighBg","surfaceContainerHighestBg","_ref$colors","colors","bgColor","key","css","_taggedTemplateLiteralLoose","_ref2","_ref3","_ref4","_ref5","_ref6","_ref7","_ref8","_ref9","_ref10","_ref11","_ref12","_ref13","_ref14","_ref15","_ref16","borderColor","Surface","SurfaceVariant"],"mappings":"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"}